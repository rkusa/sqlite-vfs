diff --git a/misc7.test b/misc7.test
index add9014..aee16b0 100644
--- a/misc7.test
+++ b/misc7.test
@@ -55,77 +55,15 @@ if {[atomic_batch_write test.db]==0} {
   db2 close
 }
 
-#--------------------------------------------------------------------
-# The following tests, misc7-6.* test the libraries behaviour when
-# it cannot open a file. To force this condition, we use up all the
-# file-descriptors before running sqlite. This probably only works
-# on unix.
-#
-
-proc use_up_files {} {
-  set ret [list]
-  catch {
-    while 1 { lappend ret [open test.db] }
-  }
-  return $ret
-}
-
-proc do_fileopen_test {prefix sql} {
-  set fd_list [use_up_files]
-  set ::go 1
-  set ::n 1
-  set ::sql $sql
-  while {$::go} {
-    catch {db close}
-    do_test ${prefix}.${::n} {
-      set rc [catch {
-        sqlite db test.db
-        db eval $::sql
-      } msg]
-      if {$rc == 0} {set ::go 0}
-  
-      expr {$rc == 0 || ($rc == 1 && [string first unable $msg]==0)}
-    } 1
-  
-    close [lindex $fd_list 0]
-    set fd_list [lrange $fd_list 1 end]
-    incr ::n
-  }
-  foreach fd $fd_list {
-    close $fd
-  }
-  db close
-}
-
-execsql { CREATE TABLE abc(a PRIMARY KEY, b, c); }
-db close
-
-if {$tcl_platform(platform)!="windows"} {
-  do_fileopen_test misc7-6.1 {
-    BEGIN;
-    INSERT INTO abc VALUES(1, 2, 3);
-    INSERT INTO abc VALUES(2, 3, 4);
-    INSERT INTO abc SELECT a+2, b, c FROM abc;
-    COMMIT;
-  }
-  
-  do_fileopen_test misc7-6.2 {
-    PRAGMA temp.cache_size = 1000;
-  }
-}
-
-#
-# End of tests for out-of-file-descriptors condition.
 #--------------------------------------------------------------------
 
 sqlite3 db test.db
 execsql {
-  DELETE FROM abc;
+  CREATE TABLE abc(a PRIMARY KEY, b, c); 
   INSERT INTO abc VALUES(1, 2, 3);
   INSERT INTO abc VALUES(2, 3, 4);
   INSERT INTO abc SELECT a+2, b, c FROM abc;
 }
-  
 
 #--------------------------------------------------------------------
 # Test that the sqlite3_busy_timeout call seems to delay approximately
@@ -534,40 +472,4 @@ do_test misc7-22.4 {
 catch { db close }
 forcedelete test.db
 
-if {$::tcl_platform(platform)=="unix"
- && [atomic_batch_write test.db]==0
-} {
-  reset_db
-  do_execsql_test 23.0 {
-    CREATE TABLE t1(x, y);
-    INSERT INTO t1 VALUES(1, 2);
-  }
-  
-  do_test 23.1 {
-    db close
-    forcedelete tst
-    file mkdir tst
-    forcecopy test.db tst/test.db
-    file attributes tst -permissions r-xr-xr-x
-  } {}
-  
-  sqlite3 db tst/test.db
-  do_execsql_test 23.2 {
-    SELECT * FROM t1;
-  } {1 2}
-  
-  do_catchsql_test 23.3 {
-    INSERT INTO t1 VALUES(3, 4);
-  } {1 {attempt to write a readonly database}}
-  
-  do_test 23.4 {
-    sqlite3_extended_errcode db
-  } {SQLITE_READONLY_DIRECTORY}
-  
-  do_test 23.5 {
-    db close
-    forcedelete tst
-  } {}
-}
-
 finish_test
